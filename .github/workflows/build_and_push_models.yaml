name: Build and Push Models

on:
  push:
    branches:
      - develop
      - main
      - bryan/deployment
    paths:
      - "src/lib/model/**"
      - ".github/workflows/build_and_push_models.yaml"
      - "Dockerfile"
      - "pyproject.toml"
      - "poetry.lock"
  workflow_dispatch:
    inputs:
      rebuild_all:
        description: "Rebuild all models (ignore change detection)"
        required: false
        default: false
        type: boolean
      specific_models:
        description: "Specific models to build (comma-separated, e.g., yolo,whisper)"
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  BUILDKIT_PROGRESS: plain

jobs:
  discover-changed-models:
    runs-on: ubuntu-latest
    outputs:
      models: ${{ steps.set-changed-models.outputs.models }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        run: |
          # Check if git is available
          if command -v git >/dev/null 2>&1; then
            if [ "${{ github.event_name }}" = "push" ]; then
              # For push events, compare with the previous commit
              changed_files=$(git diff --name-only HEAD~1 HEAD)
            else
              # Fallback for other events
              changed_files=$(git diff --name-only origin/main...HEAD)
            fi
          else
            # Fallback when git is not available (e.g., in gh act)
            echo "Git not available, assuming all model files changed"
            changed_files=$(find src/lib/model -name "*.py" -o -name "*.yaml" -o -name "*.yml" -o -name "*.json" | head -10)
          fi
          echo "Changed files:"
          echo "$changed_files"
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$changed_files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Discover changed models
        id: set-changed-models
        run: |
          # Get all model directories (flat structure)
          all_models=()
          for model_dir in src/lib/model/*/; do
            if [ -d "$model_dir" ] && [[ ! "$(basename "$model_dir")" == "__pycache__" ]]; then
              model=$(basename "$model_dir")
              # Only include models that have a requirements.txt file
              if [ -f "$model_dir/requirements.txt" ]; then
                all_models+=("$model")
              else
                echo "Warning: Model $model has no requirements.txt, skipping"
              fi
            fi
          done

          # Handle manual triggers
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.rebuild_all }}" = "true" ]; then
              echo "Manual trigger: rebuilding ALL models"
              changed_models=("${all_models[@]}")
            elif [ -n "${{ github.event.inputs.specific_models }}" ]; then
              echo "Manual trigger: building specific models"
              IFS=',' read -ra input_models <<< "${{ github.event.inputs.specific_models }}"
              changed_models=()
              for input_model in "${input_models[@]}"; do
                input_model=$(echo "$input_model" | xargs) # trim whitespace
                # Check if model exists
                if [[ " ${all_models[@]} " =~ " $input_model " ]]; then
                  changed_models+=("$input_model")
                else
                  echo "Warning: Model $input_model not found or has no requirements.txt"
                fi
              done
            else
              echo "Manual trigger: no models specified"
              changed_models=()
            fi
          else
            # Automatic trigger based on file changes
            changed_files="${{ steps.changed-files.outputs.changed_files }}"
            
            # Check if Dockerfile, dependencies, or workflow changed - if so, rebuild ALL models
            if echo "$changed_files" | grep -qE "(Dockerfile|pyproject\.toml|poetry\.lock|\.github/workflows/build_and_push_models\.yaml)"; then
              echo "Infrastructure files changed - rebuilding ALL models"
              changed_models=("${all_models[@]}")
            else
              # Only specific model directories changed
              changed_models=()
              for model in "${all_models[@]}"; do
                if echo "$changed_files" | grep -q "src/lib/model/$model/"; then
                  changed_models+=("$model")
                  echo "Model $model has changes"
                fi
              done
            fi
          fi

          # Convert to JSON array (simple string array now)
          if [ ${#changed_models[@]} -eq 0 ]; then
            models_json="[]"
          else
            models_json="["
            for i in "${!changed_models[@]}"; do
              if [ $i -gt 0 ]; then
                models_json="$models_json,"
              fi
              models_json="$models_json\"${changed_models[$i]}\""
            done
            models_json="$models_json]"
          fi

          echo "Changed models: $models_json"
          echo "models=$models_json" >> $GITHUB_OUTPUT

  build-and-push:
    needs: discover-changed-models
    runs-on: arc-runner-set
    container:
      image: ubuntu:22.04
      options: --user root
      
    if: ${{ needs.discover-changed-models.outputs.models != '[]' }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        model: ${{ fromJson(needs.discover-changed-models.outputs.models) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: kubernetes

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.model }}
          tags: |
            type=ref,event=branch
            type=raw,value=${{ github.head_ref }}
            type=ref,event=tag,prefix=v
            type=semver,pattern={{version}}
            type=sha
            ${{ github.ref_name == 'main' && 'latest' || '' }}
          labels: |
            org.opencontainers.image.title=${{ matrix.model }}
            org.opencontainers.image.description=Model service for ${{ matrix.model }}


      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: final
          build-args: |
            MODEL_NAME=${{ matrix.model }}
          provenance: false
          outputs: type=image,oci-mediatypes=true,compression=gzip,compression-level=6

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.model }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true
